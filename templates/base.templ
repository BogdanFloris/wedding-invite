package templates

import (
	"net/http"
	"wedding-invite/pkg/i18n"
	"wedding-invite/pkg/middleware"
)

templ Base(title string, r *http.Request) {
	<!DOCTYPE html>
	<html lang={ middleware.GetLanguage(r) }>
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title }</title>
			<link rel="icon" href="/static/favicon/favicon.ico" sizes="32x32"/>
			<link rel="icon" href="/static/favicon/favicon.svg" type="image/svg+xml"/>
			<script src="https://unpkg.com/htmx.org@1.9.10"></script>
			<script src="https://cdn.tailwindcss.com"></script>
			<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Cormorant+Garamond:wght@300;400;500;600;700&family=Montserrat:wght@300;400;500;600;700&family=Dancing+Script:wght@400;700&display=swap"/>
			<style>
				body {
					font-family: 'Montserrat', sans-serif;
				}
				h1, h2, h3, h4, h5, h6 {
					font-family: 'Cormorant Garamond', serif;
				}
				.calligraphy {
					font-family: 'Dancing Script', cursive;
				}
				/* Button enhancement */
				.bg-primary {
					box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
				}
			</style>
			<script>
				tailwind.config = {
					theme: {
						extend: {
							colors: {
								primary: {
									light: '#ffe5ec',
									DEFAULT: '#e75a7c',
									dark: '#d23f60',
								},
								secondary: {
									light: '#e8f1fe',
									DEFAULT: '#b9d7fd',
									dark: '#81a8f0',
								}
							}
						}
					}
				}
			</script>
		</head>
		<body class="bg-gray-50 min-h-screen">
			<div class="container mx-auto px-4 py-8 max-w-4xl">
				{ children... }
			</div>
		</body>
	</html>
}

templ AuthBase(title string, r *http.Request) {
	@Base(title, r) {
		<header class="mb-8">
			<nav class="flex justify-between items-center">
				<a href="/wedding" class="text-3xl font-bold text-primary-dark hover:text-primary transition duration-300">
					{ i18n.T(middleware.GetLanguage(r), "header.title") }
				</a>
				<div class="flex items-center space-x-6">
					<div class="flex items-center space-x-2">
						if middleware.GetLanguage(r) == "ro" {
							<a href="?lang=ro" class="text-sm font-bold text-primary-dark">
								{ i18n.T(middleware.GetLanguage(r), "language.ro") }
							</a>
						} else {
							<a href="?lang=ro" class="text-sm text-gray-600 hover:text-primary-dark">
								{ i18n.T(middleware.GetLanguage(r), "language.ro") }
							</a>
						}
						<span class="text-gray-300">|</span>
						if middleware.GetLanguage(r) == "en" {
							<a href="?lang=en" class="text-sm font-bold text-primary-dark">
								{ i18n.T(middleware.GetLanguage(r), "language.en") }
							</a>
						} else {
							<a href="?lang=en" class="text-sm text-gray-600 hover:text-primary-dark">
								{ i18n.T(middleware.GetLanguage(r), "language.en") }
							</a>
						}
					</div>
					<a href="/logout" class="text-sm text-gray-600 hover:text-primary-dark">
						{ i18n.T(middleware.GetLanguage(r), "header.logout") }
					</a>
				</div>
			</nav>
		</header>
		{ children... }
		<footer class="mt-16 pt-8 border-t border-gray-200 text-center text-gray-500 text-sm">
			<p>{ i18n.T(middleware.GetLanguage(r), "footer.copyright") }</p>
		</footer>
	}
}