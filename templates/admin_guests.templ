package templates

import (
	"fmt"
	"net/http"
	"time"
	"wedding-invite/pkg/models"
)

templ AdminGuests(guests []models.Guest, r *http.Request) {
	@Base("Wedding Guests", r) {
		<div class="container mx-auto px-4 py-8">
			<h1 class="text-3xl font-bold mb-6">All Wedding Guests</h1>
			
			<div class="mb-6">
				<p class="text-lg">Total Guests: <span class="font-bold">{ fmt.Sprintf("%d", len(guests)) }</span></p>
			</div>

			<div class="overflow-x-auto">
				<table class="min-w-full bg-white border border-gray-300">
					<thead>
						<tr class="bg-gray-100">
							<th class="px-6 py-3 border-b border-gray-300 text-left text-xs font-medium text-gray-600 uppercase tracking-wider">ID</th>
							<th class="px-6 py-3 border-b border-gray-300 text-left text-xs font-medium text-gray-600 uppercase tracking-wider">Email</th>
							<th class="px-6 py-3 border-b border-gray-300 text-left text-xs font-medium text-gray-600 uppercase tracking-wider">Name</th>
							<th class="px-6 py-3 border-b border-gray-300 text-left text-xs font-medium text-gray-600 uppercase tracking-wider">Attending</th>
							<th class="px-6 py-3 border-b border-gray-300 text-left text-xs font-medium text-gray-600 uppercase tracking-wider">Meal</th>
							<th class="px-6 py-3 border-b border-gray-300 text-left text-xs font-medium text-gray-600 uppercase tracking-wider">Dietary</th>
							<th class="px-6 py-3 border-b border-gray-300 text-left text-xs font-medium text-gray-600 uppercase tracking-wider">Last Updated</th>
						</tr>
					</thead>
					<tbody>
						for i, guest := range guests {
							<tr class={ fmt.Sprintf("border-b border-gray-300 %s", getBgClass(i)) }>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{ fmt.Sprintf("%d", guest.ID) }</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{ guest.InvitationEmail }</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{ guest.Name }</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
									if guest.Attending.Valid {
										if guest.Attending.Bool {
											<span class="bg-green-100 text-green-800 px-2 py-1 rounded">Yes</span>
										} else {
											<span class="bg-red-100 text-red-800 px-2 py-1 rounded">No</span>
										}
									} else {
										<span class="bg-gray-100 text-gray-800 px-2 py-1 rounded">Pending</span>
									}
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
									if guest.MealPreference.Valid {
										{ guest.MealPreference.String }
									} else {
										<span class="text-gray-400">—</span>
									}
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
									if guest.DietaryRestrictions.Valid && guest.DietaryRestrictions.String != "" {
										{ guest.DietaryRestrictions.String }
									} else {
										<span class="text-gray-400">—</span>
									}
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
									{ formatTime(guest.LastUpdated) }
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	}
}

func getBgClass(index int) string {
	if index%2 == 0 {
		return ""
	}
	return "bg-gray-50"
}

func formatTime(t time.Time) string {
	return t.Format("Jan 02, 2006 15:04")
}
