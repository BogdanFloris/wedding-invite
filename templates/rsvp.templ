package templates

import (
	"net/http"
	"strconv"
	"strings"
	"wedding-invite/pkg/i18n"
	"wedding-invite/pkg/middleware"
	"wedding-invite/pkg/models"
)

// RSVPForm renders the RSVP form
templ RSVPForm(familyName, invitationID string, guests []models.Guest, canAddGuest bool, maxGuests int, mealOptions []string, successMsg string, r *http.Request) {
	@AuthBase(i18n.T(middleware.GetLanguage(r), "rsvp.title")+" - "+familyName, r) {
		<div class="max-w-4xl mx-auto">
			<div class="bg-white rounded-lg shadow-md p-8 mb-8">
				<h1 class="text-3xl font-bold text-primary-dark mb-6 text-center">{ i18n.T(middleware.GetLanguage(r), "rsvp.title") }</h1>
				<div class="mb-6 text-center">
					<p class="text-lg text-gray-600 mb-2">{ i18n.T(middleware.GetLanguage(r), "rsvp.subtitle") }</p>
					<p class="text-xl font-semibold text-primary-dark mb-4">{ familyName }</p>
					<p class="text-sm text-gray-500 mb-6">{ i18n.T(middleware.GetLanguage(r), "rsvp.deadline") }</p>
				</div>
				if successMsg != "" {
					<div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6">
						<p class="text-center">{ successMsg }</p>
					</div>
				}
				<!-- Main RSVP Form -->
				<div id="rsvp-container">
					if len(guests) == 0 && canAddGuest {
						<div class="bg-yellow-50 border border-yellow-200 p-4 rounded-lg mb-8">
							<p class="text-center text-yellow-800">
								{ i18n.T(middleware.GetLanguage(r), "rsvp.form.initialText") }
							</p>
						</div>
						<div class="text-center">
							<a
								href="/rsvp/add-guest"
								class="bg-primary hover:bg-primary-dark text-white font-medium py-3 px-8 rounded-md transition duration-300 inline-block"
							>
								<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 inline" viewBox="0 0 20 20" fill="currentColor">
									<path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path>
								</svg>
								{ i18n.T(middleware.GetLanguage(r), "rsvp.form.add_guest") }
							</a>
						</div>
					} else {
						<form id="rsvp-form" hx-post="/rsvp/submit" hx-target="#rsvp-container" hx-swap="innerHTML">
							<input type="hidden" name="invitation_id" value={ invitationID }/>
							<input type="hidden" name="max_guests" value={ strconv.Itoa(maxGuests) }/>
							<!-- Attendance choice for the whole party -->
							<div class="bg-gray-50 p-6 rounded-lg border border-gray-200 mb-6">
								<h3 class="text-xl font-semibold text-gray-800 mb-4">{ i18n.T(middleware.GetLanguage(r), "rsvp.form.question") }?</h3>
								<div class="flex space-x-6">
									<label class="inline-flex items-center">
										<input
											type="radio"
											name="party_attending"
											value="yes"
											class="form-radio h-5 w-5 text-primary"
											required="required"
											if anyGuestsAttending(guests) {
												checked
											}
										/>
										<span class="ml-2">{ i18n.T(middleware.GetLanguage(r), "rsvp.form.attending") }</span>
									</label>
									<label class="inline-flex items-center">
										<input
											type="radio"
											name="party_attending"
											value="no"
											class="form-radio h-5 w-5 text-red-500"
											required="required"
											if allGuestsNotAttending(guests) {
												checked
											}
										/>
										<span class="ml-2">{ i18n.T(middleware.GetLanguage(r), "rsvp.form.not_attending") }</span>
									</label>
								</div>
							</div>
							<!-- Guest Information Section -->
							<div class="mb-6">
								<div class="flex justify-between items-center mb-4">
									<h3 class="text-lg font-semibold text-gray-700">{ i18n.T(middleware.GetLanguage(r), "rsvp.form.guests") }</h3>
									<span id="guest-count" class="text-sm text-gray-500">
										{ formatMaxGuestsMessage(middleware.GetLanguage(r), "rsvp.form.max_guests", maxGuests) }
									</span>
								</div>
								<div id="guests-container" class="space-y-4">
									for i, guest := range guests {
										@GuestCard(guest, mealOptions, i, r)
									}
								</div>
								if canAddGuest && len(guests) < maxGuests {
									<div class="mt-6 text-center">
										<a
											href="/rsvp/add-guest"
											class="inline-flex items-center text-primary hover:text-primary-dark font-medium py-2 px-4 rounded-md transition duration-300 border border-primary hover:border-primary-dark"
										>
											<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
												<path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path>
											</svg>
											{ i18n.T(middleware.GetLanguage(r), "rsvp.form.add_guest") }
										</a>
									</div>
								}
							</div>
							<div class="mt-8 flex justify-center">
								<button
									type="submit"
									class="bg-primary hover:bg-primary-dark text-white font-medium py-3 px-8 rounded-md transition duration-300"
								>
									{ i18n.T(middleware.GetLanguage(r), "rsvp.form.submit") }
								</button>
							</div>
						</form>
					}
				</div>
				<div class="mt-8 pt-6 border-t border-gray-200 text-center">
					<p class="text-sm text-gray-500">
						{ i18n.T(middleware.GetLanguage(r), "rsvp.form.footer") }
					</p>
				</div>
			</div>
		</div>
	}
}

// GuestCard renders a card with guest information
templ GuestCard(guest models.Guest, mealOptions []string, index int, r *http.Request) {
	<div id={ "guest-" + strconv.FormatInt(guest.ID, 10) } class="bg-gray-50 p-5 rounded-lg border border-gray-200">
		<div class="flex justify-between items-start mb-4">
			<div class="flex items-center">
				<span class="bg-primary text-white rounded-full w-7 h-7 flex items-center justify-center mr-3">
					{ strconv.Itoa(index + 1) }
				</span>
				<h3 class="text-lg font-semibold text-gray-800">
					if guest.Name == "" {
						<span class="italic text-gray-500">{ i18n.T(middleware.GetLanguage(r), "rsvp.form.guest_placeholder") }</span>
					} else {
						{ guest.Name }
					}
				</h3>
			</div>
			<a
				href={ templ.SafeURL("/rsvp/guest/" + strconv.FormatInt(guest.ID, 10)) }
				class="text-red-500 hover:text-red-700 text-sm"
			>
				{ i18n.T(middleware.GetLanguage(r), "rsvp.form.remove") }
			</a>
		</div>
		<!-- Hidden input to track this guest -->
		<input type="hidden" name="guest_ids[]" value={ strconv.FormatInt(guest.ID, 10) }/>
		<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
			<div>
				<label class="block text-gray-700 text-sm font-medium mb-2">{ i18n.T(middleware.GetLanguage(r), "rsvp.form.guest_placeholder") }</label>
				<input
					type="text"
					name={ "guest_name_" + strconv.FormatInt(guest.ID, 10) }
					value={ guest.Name }
					class="block w-full bg-white border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-primary focus:border-primary"
					required="required"
				/>
			</div>
			<div>
				<label class="block text-gray-700 text-sm font-medium mb-2">{ i18n.T(middleware.GetLanguage(r), "rsvp.form.meal_preference") }</label>
				<select
					name={ "guest_meal_" + strconv.FormatInt(guest.ID, 10) }
					class="block w-full bg-white border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-primary focus:border-primary"
				>
					for _, meal := range mealOptions {
						<option
							value={ meal }
							if guest.MealPreference.Valid && guest.MealPreference.String == meal {
								selected
							}
						>
							{ getMealTranslation(middleware.GetLanguage(r), meal) }
						</option>
					}
				</select>
			</div>
		</div>
		<div class="mt-4">
			<label class="block text-gray-700 text-sm font-medium mb-2">{ i18n.T(middleware.GetLanguage(r), "rsvp.form.dietary_notes") }</label>
			<textarea
				name={ "guest_dietary_" + strconv.FormatInt(guest.ID, 10) }
				rows="2"
				class="block w-full bg-white border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-primary focus:border-primary"
				placeholder={ i18n.T(middleware.GetLanguage(r), "rsvp.form.dietary_notes_placeholder") }
			>
				if guest.DietaryRestrictions.Valid {
					{ guest.DietaryRestrictions.String }
				}
			</textarea>
		</div>
	</div>
}

// SuccessMessage renders a success message after RSVP submission
templ SuccessMessage(familyName string, r *http.Request) {
	<div class="text-center py-8">
		<div class="bg-green-100 border border-green-400 text-green-700 px-6 py-4 rounded-lg mb-6 inline-block">
			<h3 class="text-xl font-bold mb-2">{ i18n.T(middleware.GetLanguage(r), "rsvp.success") }</h3>
			<p>{ formatSuccessMessage(middleware.GetLanguage(r), "rsvp.success_message", familyName) }</p>
		</div>
		<div class="mt-8">
			<a href="/rsvp/status" class="bg-primary hover:bg-primary-dark text-white font-medium py-3 px-8 rounded-md transition duration-300">
				{ i18n.T(middleware.GetLanguage(r), "rsvp.status.title") }
			</a>
		</div>
	</div>
}

// RSVPStatus renders the RSVP status page
templ RSVPStatus(familyName string, guests []models.Guest, r *http.Request) {
	@AuthBase(i18n.T(middleware.GetLanguage(r), "rsvp.status.title")+" - "+familyName, r) {
		<div class="max-w-4xl mx-auto">
			<div class="bg-white rounded-lg shadow-md p-8 mb-8">
				<h1 class="text-3xl font-bold text-primary-dark mb-6 text-center">{ i18n.T(middleware.GetLanguage(r), "rsvp.status.title") }</h1>
				<div class="mb-8 text-center">
					<p class="text-lg text-gray-600 mb-2">{ i18n.T(middleware.GetLanguage(r), "rsvp.status.subtitle") }</p>
					<p class="text-xl font-semibold text-primary-dark">{ familyName }</p>
				</div>
				if len(guests) == 0 {
					<div class="bg-yellow-50 border border-yellow-200 p-6 rounded-lg text-center">
						<p class="text-yellow-800 mb-4">{ i18n.T(middleware.GetLanguage(r), "rsvp.status.no_guests") }</p>
						<a
							href="/rsvp"
							class="inline-block bg-primary hover:bg-primary-dark text-white font-medium py-2 px-6 rounded-md transition duration-300"
						>
							{ i18n.T(middleware.GetLanguage(r), "rsvp.status.start_rsvp") }
						</a>
					</div>
				} else {
					<div class="overflow-hidden bg-white shadow sm:rounded-md mb-8">
						<h3 class="px-4 py-2 bg-gray-50 text-gray-700 font-medium">{ i18n.T(middleware.GetLanguage(r), "rsvp.status.your_guests") }</h3>
						<ul role="list" class="divide-y divide-gray-200">
							for _, guest := range guests {
								<li class="px-4 py-4 sm:px-6">
									<div class="flex items-center justify-between">
										<p class="truncate text-lg font-medium text-gray-800">{ guest.Name }</p>
										<div class="ml-2 flex-shrink-0">
											if guest.Attending.Valid {
												if guest.Attending.Bool {
													<span class="inline-flex items-center rounded-full bg-green-100 px-3 py-0.5 text-sm font-medium text-green-800">
														{ i18n.T(middleware.GetLanguage(r), "rsvp.status.attending") }
													</span>
												} else {
													<span class="inline-flex items-center rounded-full bg-red-100 px-3 py-0.5 text-sm font-medium text-red-800">
														{ i18n.T(middleware.GetLanguage(r), "rsvp.status.not_attending") }
													</span>
												}
											} else {
												<span class="inline-flex items-center rounded-full bg-gray-100 px-3 py-0.5 text-sm font-medium text-gray-600">
													Not Responded
												</span>
											}
										</div>
									</div>
									if guest.Attending.Valid && guest.Attending.Bool {
										<div class="mt-2 text-sm text-gray-600">
											<p class="truncate">
												<span class="font-medium">{ i18n.T(middleware.GetLanguage(r), "rsvp.form.meal_preference") }:</span>
												if guest.MealPreference.Valid {
													{ getMealTranslation(middleware.GetLanguage(r), guest.MealPreference.String) }
												} else {
													Not selected
												}
											</p>
											if guest.DietaryRestrictions.Valid && guest.DietaryRestrictions.String != "" {
												<p class="mt-1">
													<span class="font-medium">{ i18n.T(middleware.GetLanguage(r), "rsvp.form.dietary_notes") }:</span>
													{ guest.DietaryRestrictions.String }
												</p>
											}
										</div>
									}
								</li>
							}
						</ul>
					</div>
					<div class="flex justify-center">
						<a
							href="/rsvp"
							class="inline-block bg-primary hover:bg-primary-dark text-white font-medium py-2 px-6 rounded-md transition duration-300"
						>
							{ i18n.T(middleware.GetLanguage(r), "rsvp.status.edit_rsvp") }
						</a>
					</div>
				}
			</div>
		</div>
	}
}

// Helper function to check if any guests are attending
func anyGuestsAttending(guests []models.Guest) bool {
	for _, guest := range guests {
		if guest.Attending.Valid && guest.Attending.Bool {
			return true
		}
	}
	return false
}

// Helper function to check if all guests are not attending
func allGuestsNotAttending(guests []models.Guest) bool {
	if len(guests) == 0 {
		return false
	}

	for _, guest := range guests {
		if !guest.Attending.Valid || guest.Attending.Bool {
			return false
		}
	}
	return true
}

// Helper function to get meal option translations
func getMealTranslation(lang, meal string) string {
	switch meal {
	case "Standard":
		return i18n.T(lang, "rsvp.form.meal_options.standard")
	case "Vegetarian":
		return i18n.T(lang, "rsvp.form.meal_options.vegetarian")
	case "Vegan":
		return i18n.T(lang, "rsvp.form.meal_options.vegan")
	case "Ovo-Lacto Vegetarian":
		return i18n.T(lang, "rsvp.form.meal_options.ovo_lacto_vegetarian")
	case "Ovo-Lacto with Fish":
		return i18n.T(lang, "rsvp.form.meal_options.ovo_lacto_fish")
	case "Muslim":
		return i18n.T(lang, "rsvp.form.meal_options.muslim")
	case "Gluten-Free":
		return i18n.T(lang, "rsvp.form.meal_options.gluten_free")
	case "Lactose-Free":
		return i18n.T(lang, "rsvp.form.meal_options.lactose_free")
	case "Child":
		return i18n.T(lang, "rsvp.form.meal_options.child")
	default:
		return meal
	}
}

// Helper function to format success message with placeholders
func formatSuccessMessage(lang, key string, name string) string {
	msg := i18n.T(lang, key)
	// Simple string replacement - in a real app you'd want something more robust
	return strings.Replace(msg, "{0}", name, -1)
}

// Helper function to format max guests message with placeholders
func formatMaxGuestsMessage(lang, key string, max int) string {
	msg := i18n.T(lang, key)
	// Simple string replacement - in a real app you'd want something more robust
	return strings.Replace(msg, "{0}", strconv.Itoa(max), -1)
}
